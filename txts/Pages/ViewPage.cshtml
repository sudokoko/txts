@page "/@{username}"
@using txts.Types.Website
@model txts.Pages.ViewPage

@{
    Layout = "Layouts/PageLayout";

    Model.Title = Model.PageData.Username;

    Model.Description = Model.PageData.Contents.Length > 250
        ? Model.PageData.Contents[..250] + "..."
        : Model.PageData.Contents;

    Model.DisplayTitle = false;
}

<header>
    <a href="/">Txts</a> / @Model.Title
    @if (Model.PageData.IsVerified)
    {
        <span class="verified-icon"
              role="tooltip"
              data-microtip-position="bottom"
              data-microtip-size="large"
              aria-label="This page has been verified by site administrators because the username represents the owner of the page.">
            <i class="bi bi-patch-check-fill"></i>
        </span>
    }
</header>

@switch (Model.Callback)
{
    case "create" when Model.Secret != null:
        @await Html.PartialAsync("Partials/MessagePartial", MessageEntity.CreateSuccess("Page created successfully", $"Your page secret is {Model.Secret}, which is required to make future changes to your page. Remember to keep it safe (write it down, don't share it)."))
        break;
    case "edit":
        @await Html.PartialAsync("Partials/MessagePartial", MessageEntity.CreateSuccess("Page edited successfully", "Your page content has been updated to reflect your changes."))
        break;
}

@if (!Model.PageData.IsBanned)
{
    @Html.Raw(Model.PageData.Contents)

    <div class="tb-padding right">
        <a href="/@@@Model.PageData.Username/edit">(edit)</a>
    </div>
}
else
{
    if (Model.BanData != null)
    {
        @await Html.PartialAsync("Partials/MessagePartial", MessageEntity.CreateError("This page has been banned.", Model.BanData.Reason))
    }
}